@page "/cineforum"
@using BlazorApp.Components.Common
@using BlazorApp.Models
@inject HttpClient Http

<PageTitle>Cineforum</PageTitle>

<h1>Cineforum</h1>
<div class="content mb-4">
    I host a cineforum with a group of friends weekly. This is a simple page to track the movies we watch together.
</div>

@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (movies is not null)
{
    <div class="row">
        <div class="col-md-2 col-sm-12">
            <label class="form-label" for="searchBox">Results: @TotalMovies</label>
            <SearchBox placeholder="Search..." SearchQueryChanged="Search" Id="searchBox" />
        </div>
    </div>

    <MoviesTable Movies="@filtered" />
}

@code {
    bool loading { get; set; } = true;
    IQueryable<MovieViewModel> movies = Enumerable.Empty<MovieViewModel>().AsQueryable();
    IQueryable<MovieViewModel> filtered = Enumerable.Empty<MovieViewModel>().AsQueryable();

    int TotalMovies => filtered.Count();

    protected override async Task OnInitializedAsync()
    {
        var data = await
        Http.GetFromJsonAsync<IReadOnlyList<Season>>($"sample-data/cineforum.json?v={DateTime.Today.ToString("yyyyMMdd.HHmm")}");

        if (data is not null)
            movies = GetViewModels(data);

        filtered = movies;

        loading = false;
    }

    async Task Search(string query)
    {
        if (string.IsNullOrEmpty(query))
        {
            filtered = movies.AsQueryable();
            return;
        }

        var searchTerm = query.ToLower();

        await Task.Run(() =>
        {
            filtered = filtered.AsQueryable().Where(m =>
    (m.OriginalTitle != null && m.OriginalTitle.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
    (m.TitleIT != null && m.TitleIT.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
    (m.Directors != null && m.Directors.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
    );
        });
    }

    static IQueryable<MovieViewModel> GetViewModels(IEnumerable<Season> seasons)
    {
        var list = new List<MovieViewModel>();

        int count = 0;

        foreach (var season in seasons)
        {
            int seasonNumber = season.SeasonId;

            for (int i = 0; i < season.Movies.Length; i++)
            {
                var movie = season.Movies[i];
                count++;

                list.Add(new MovieViewModel()
                {
                    Number = count,
                    WeekNumber = i + 1,
                    SeasonNumber = seasonNumber,

                    TitleId = movie.TitleId,
                    OriginalTitle = movie.OriginalTitle,
                    TitleIT = movie.TitleIT,
                    Year = movie.Year,
                    Directors = movie.Directors,
                    Countries = movie.Countries,
                });
            }
        }

        return list.AsQueryable();
    }
}
