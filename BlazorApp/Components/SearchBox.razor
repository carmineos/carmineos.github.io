@using System.Timers;

@implements IDisposable

<input class="form-control" placeholder="Search..." @attributes="AdditionalAttributes" @bind="@SearchQuery"
    @bind:event="oninput" />

@code
{
    Timer debounceTimer = default!;
    string searchQuery = default!;

    string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            debounceTimer.Stop();
            debounceTimer.Start();
        }
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public int Debounce { get; set; } = 250;

    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += Search;
    }

    async void Search(Object source, EventArgs e)
    {
        await InvokeAsync(() => SearchQueryChanged.InvokeAsync(SearchQuery));
    }

    public void Dispose()
    {
        debounceTimer.Dispose();
    }
}