@page "/cineforum"
@inject HttpClient Http

<PageTitle>Cineforum</PageTitle>

<h1>Cineforum</h1>
<div>
    I host a cineforum with a group of friends weekly. This is a simple page to track the movies we watch together.
</div>

@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (seasons is not null)
{
    <div class="row justify-content-end">
        <div class="col-2">
            <span class="text-muted">
                Results: @TotalMovies
            </span>
            <SearchBox placeholder="Search..." SearchQueryChanged="Search" />
        </div>
    </div>

    @if (filteredSeasons is not null)
    {
        foreach (var list in filteredSeasons)
        {
            <MoviesListTable List="@list" />
        }
    }
}

@code {
    bool loading { get; set; } = true;
    IEnumerable<Season> seasons = Enumerable.Empty<Season>();
    IQueryable<Season> filteredSeasons = Enumerable.Empty<Season>().AsQueryable();

    int TotalMovies => filteredSeasons.Sum(m => m.Movies == null ? 0 : m.Movies.Length);

    protected override async Task OnInitializedAsync()
    {
        var data = await Http.GetFromJsonAsync<IReadOnlyList<Season>>($"sample-data/cineforum.json?v={DateTime.Today.ToString("yyyyMMdd.HHmm")}");

        if (data is not null)
            seasons = data;

        filteredSeasons = seasons.AsQueryable();
        loading = false;
    }

    async Task Search(string query)
    {
        if (string.IsNullOrEmpty(query))
        {
            filteredSeasons = seasons.AsQueryable();
            return;
        }

        var searchTerm = query.ToLower();

        await Task.Run(() =>
        {
            filteredSeasons = seasons.AsQueryable().Select(list => new Season()
                {
                    SeasonId = list.SeasonId,
                    Movies = list.Movies.Where(m =>
                (m.OriginalTitle != null && m.OriginalTitle.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (m.TitleIT != null && m.TitleIT.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (m.Directors != null && m.Directors.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                                ).ToArray()
                }).Where(list => list.Movies.Any());
        });
    }
}
